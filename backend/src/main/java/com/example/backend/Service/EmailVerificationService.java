package com.example.backend.Service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.example.backend.Repository.UserRepository;

import java.security.SecureRandom;

@Service
public class EmailVerificationService {

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private CacheManager cacheManager;

    @Autowired
    private UserRepository userRepository;

    private static final String CACHE_NAME = "verificationCodes";
    private static final String VERIFIED_EMAILS_CACHE = "verifiedEmails";
    private static final long CODE_EXPIRATION_MINUTES = 10;

    private final SecureRandom secureRandom = new SecureRandom();

    public String generateAndSendVerificationCode(String email) {
        if (userRepository.existsByEmail(email)) {
            throw new RuntimeException("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω");
        }

        String code = generateSecureRandomCode();
        sendVerificationEmail(email, code);

        Cache cache = cacheManager.getCache(CACHE_NAME);
        if (cache != null) {
            cache.put(email, code);
        }

        return code;
    }

    private String generateSecureRandomCode() {
        int randomNumber = secureRandom.nextInt(1000000);
        return String.format("%06d", randomNumber);
    }

    private void sendVerificationEmail(String toEmail, String code) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(toEmail);
            message.setSubject("üîê M√£ x√°c th·ª±c ƒëƒÉng k√Ω - Qu·∫£n l√Ω l·ªõp h·ªçc");
            message.setText("Xin ch√†o!\n\n" +
                    "M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: " + code +
                    "\n\nM√£ c√≥ hi·ªáu l·ª±c trong " + CODE_EXPIRATION_MINUTES + " ph√∫t." +
                    "\n\n‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai." +
                    "\n\nN·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y." +
                    "\n\nTr√¢n tr·ªçng,\n·ª®ng d·ª•ng Qu·∫£n l√Ω l·ªõp h·ªçc");

            mailSender.send(message);
        } catch (Exception e) {
            throw new RuntimeException("L·ªói g·ª≠i email: " + e.getMessage());
        }
    }

    public boolean verifyCode(String email, String code) {
        Cache cache = cacheManager.getCache(CACHE_NAME);
        if (cache == null) {
            return false;
        }

        // Ki·ªÉm tra xem cache c√≥ t·ªìn t·∫°i cho email kh√¥ng
        Cache.ValueWrapper wrapper = cache.get(email);
        if (wrapper == null) {
            return false;
        }

        String storedCode = (String) wrapper.get();

        return code != null && code.equals(storedCode);
    }

    public void markEmailAsVerified(String email) {
        Cache cache = cacheManager.getCache(VERIFIED_EMAILS_CACHE);
        if (cache != null) {
            cache.put(email, true);
        }
    }

    public void clearVerificationOTPStatus(String email) {
        // X√≥a m√£ OTP v√† tr·∫°ng th√°i x√°c th·ª±c
        Cache cache = cacheManager.getCache(CACHE_NAME);
        if (cache != null) {
            cache.evict(email);
        }

        Cache verifiedCache = cacheManager.getCache(VERIFIED_EMAILS_CACHE);
        if (verifiedCache != null) {
            verifiedCache.evict(email);
        }
    }

    @Scheduled(fixedRate = 300000) // D·ªçn d·∫πp m·ªói 5 ph√∫t
    public void cleanupExpiredCodes() {
        // Cache s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n theo c·∫•u h√¨nh
    }
}